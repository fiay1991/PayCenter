package com.park.paycenter.controller;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.zxing.WriterException;
import com.park.paycenter.service.PayService;
import com.park.paycenter.tools.MD5encryptTool;

/**
 * @author liuyang
 *         时间：2016年4月6日
 *         功能：暴露给用户的支付业务
 * @author WangYuefei
 *         时间：2017年11月17日
 *         功能：新增刷卡支付 + 从微信/支付宝查询订单
 */
@Controller
@RequestMapping(value = "PayController")
public class PayController {
	@Resource(name = "PayServiceImpl")
	private PayService payService;
	
	Logger logger =LoggerFactory.getLogger(getClass());
	
	/**
	 * 刷卡支付
	 * 
	 * @return
	 * @throws IOException 
	 * @throws WriterException
	 */
	@ResponseBody
	@RequestMapping(value = "/cardpay", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public String cardpay(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String params = request.getParameter("params");// 对方的json形式参数都叫params
		logger.info("** 刷卡支付 - 请求信息：" + request);
		logger.info("** 刷卡支付 - 参数：" + params);
		if (null != params) {
			params = params.trim();
		}
		return payService.unifiedorder(params, request, response);
	}

	/**
	 * 统一下单
	 * 
	 * @return
	 * @throws IOException 
	 * @throws WriterException
	 */
	@ResponseBody
	@RequestMapping(value = "/unifiedorder", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public String unifiedorder(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String params = request.getParameter("params");// 对方的json形式参数都叫params
		logger.info("请求信息：{}",request);
		logger.info("统一下单参数：{}",params);
		if (null != params) {
			params = params.trim();
		}
		return payService.unifiedorder(params, request, response);
	}
	
	/**
	 * 从微信/支付宝查询订单
	 * @param request
	 * @param response
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/queryorderfrom", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public String queryOrder(HttpServletRequest request, HttpServletResponse response) {
		String params = request.getParameter("params");// 对方的json形式参数都叫params
		logger.info("** 查询微信/支付宝订单 - 参数：",params);
		if (null != params) {
			params = params.trim();
		}
		return payService.queryOrder(params);
	}

	/**
	 * 查询订单
	 * 
	 * @return
	 * @throws IOException 
	 */
	@ResponseBody
	@RequestMapping(value = "/queryorder", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public String queryorder(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String params = request.getParameter("params");// 对方的json形式参数都叫params
		logger.info("查询订单请求参数：{}",params);
		if (null != params) {
			params = params.trim();
		}
		return payService.queryorder(params);
	}

	/**
	 * 关闭订单
	 * 
	 * @return
	 * @throws IOException 
	 */
	@ResponseBody
	@RequestMapping(value = "/offorder", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public String offorder(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String params = request.getParameter("params");// 对方的json形式参数都叫params
		logger.info("关闭订单请求参数：{}",params);
		if (null != params) {
			params = params.trim();
		}
		return payService.offorder(params);
	}
	
	@ResponseBody
	@RequestMapping(value = "/refund", produces = "text/html;charset=UTF-8", method = RequestMethod.POST)
	public void weixinRefund(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String url = "https://api.mch.weixin.qq.com/secapi/pay/refund";
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("appid", "wx9dd007c6f8f418e5");
		paramMap.put("mch_id", "1261552501");
		paramMap.put("nonce_str", String.valueOf((int) ((Math.random() * 10 + 1) * 10000000)));
		paramMap.put("out_trade_no", "56019_17112912154387006");
		paramMap.put("out_refund_no", "56019_17112912154387006_refund");
		paramMap.put("total_fee", "151");
		paramMap.put("refund_fee", "151");
		String linkString = piece_together_WeiXin_unifiedorder(paramMap);
		String signLinkString = linkString + "&key=234rjth3iu43rsgsggaig33833jgaagm";
		paramMap.put("sign", MD5encryptTool.getMD5(signLinkString));
		String sendXML = creatWeiXin_unifiedorderXML(paramMap);
		sendWeiXinService(url, new String(sendXML.toString().getBytes(), "ISO8859-1"));
	}
	
	/**
	 * 拼接(统一下单)字符串链接
	 * 
	 * @param weiXin_unifiedorderRequest
	 * @return
	 */
	public String piece_together_WeiXin_unifiedorder(Map<String, String> paramMap) {

		String character = "";
		character += "appid=" + paramMap.get("appid");
		character += "&mch_id=" + paramMap.get("mch_id");
		character += "&nonce_str=" + paramMap.get("nonce_str");
		character += "&out_refund_no=" + paramMap.get("out_refund_no");
		character += "&out_trade_no=" + paramMap.get("out_trade_no");
		character += "&refund_fee=" + paramMap.get("refund_fee");
		character += "&total_fee=" + paramMap.get("total_fee");
		character += "&key=234rjth3iu43rsgsggaig33833jgaagm";
		return character;
	}
	
	public String creatWeiXin_unifiedorderXML(Map<String, String> paramMap) {
		Document document = DocumentHelper.createDocument();
		Element xml = document.addElement("xml");
		// 必填
		Element appid = xml.addElement("appid");// 公众账号ID
		appid.setText(paramMap.get("appid"));

		Element mch_id = xml.addElement("mch_id");
		mch_id.setText(paramMap.get("mch_id"));

		Element nonce_str = xml.addElement("nonce_str");
		nonce_str.setText(paramMap.get("nonce_str"));
		
		Element out_refund_no = xml.addElement("out_refund_no");
		out_refund_no.setText(paramMap.get("out_refund_no"));
		
		Element out_trade_no = xml.addElement("out_trade_no");
		out_trade_no.setText(paramMap.get("out_trade_no"));
		
		Element refund_fee = xml.addElement("refund_fee");
		refund_fee.setText(paramMap.get("refund_fee"));
		
		Element sign = xml.addElement("sign");
		sign.setText(paramMap.get("sign"));
		
		Element total_fee = xml.addElement("total_fee");
		total_fee.setText(paramMap.get("total_fee"));
		
		return document.asXML();
	}
	
	/**
	 * 向微信服务器发送数据
	 * 
	 * @param URL
	 * @param params
	 * @return
	 */
	public String sendWeiXinService(String URL, String params) {
		try {
			// 创建连接
			URL url = new URL(URL);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setRequestMethod("POST");
			connection.setUseCaches(false);
			connection.setInstanceFollowRedirects(true);
			connection.setConnectTimeout(10000);
			connection.setReadTimeout(10000);
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			connection.connect();
			// POST请求
			DataOutputStream out = new DataOutputStream(connection.getOutputStream());
			out.writeBytes(params);
			out.flush();
			out.close();
			// 读取响应
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String lines;
			StringBuffer sb = new StringBuffer("");
			while ((lines = reader.readLine()) != null) {
				lines = new String(lines.getBytes(), "utf-8");
				sb.append(lines);
			}
			reader.close();
			// 断开连接
			connection.disconnect();

			return sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}
